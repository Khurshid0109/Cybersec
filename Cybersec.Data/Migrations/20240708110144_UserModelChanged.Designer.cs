// <auto-generated />
using System;
using Cybersec.Data.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cybersec.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240708110144_UserModelChanged")]
    partial class UserModelChanged
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cybersec.Domain.Entities.Article", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.ContentBlock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Order")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.ToTable("ContentBlocks");

                    b.HasDiscriminator<string>("ContentType").HasValue("ContentBlock");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("isVerified")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.UserCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("boolean");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserCodes");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.CodeBlock", b =>
                {
                    b.HasBaseType("Cybersec.Domain.Entities.ContentBlock");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Code");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.ImageBlock", b =>
                {
                    b.HasBaseType("Cybersec.Domain.Entities.ContentBlock");

                    b.Property<string>("ImageFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Image");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.TextBlock", b =>
                {
                    b.HasBaseType("Cybersec.Domain.Entities.ContentBlock");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.VideoBlock", b =>
                {
                    b.HasBaseType("Cybersec.Domain.Entities.ContentBlock");

                    b.Property<string>("VideoFilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Video");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.ContentBlock", b =>
                {
                    b.HasOne("Cybersec.Domain.Entities.Article", "Article")
                        .WithMany("Blocks")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.UserCode", b =>
                {
                    b.HasOne("Cybersec.Domain.Entities.User", "User")
                        .WithMany("USerCodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.Article", b =>
                {
                    b.Navigation("Blocks");
                });

            modelBuilder.Entity("Cybersec.Domain.Entities.User", b =>
                {
                    b.Navigation("USerCodes");
                });
#pragma warning restore 612, 618
        }
    }
}
